Summary**********************************************************************************
Loading a dataset (Iris dataset).
Training a machine learning model (Random Forest).
Evaluating the model's performance using test data.
Saving the trained model to a file for later use.
Making predictions with both the trained and loaded models.
*****************************************************************************************
What is Iris dataset?
The Iris dataset is one of the most famous datasets in the field of machine learning and statistics. It was introduced by the British biologist and statistician Ronald A. Fisher in 1936 and is commonly used for demonstrating various machine learning algorithms and techniques. 

Sample of the Iris Dataset:
Hereâ€™s a small sample of what the data looks like:
Sepal Length	Sepal Width	Petal Length	Petal Width	Species
5.1	3.5	1.4	0.2	Iris-setosa
4.9	3.0	1.4	0.2	Iris-setosa
4.7	3.2	1.3	0.2	Iris-setosa
7.0	3.2	4.7	1.4	Iris-versicolor
6.4	3.2	4.5	1.5	Iris-versicolor
6.3	3.3	6.0	2.5	Iris-virginica

**************
What is Random Forest ?
Random Forest is a popular machine learning algorithm used for classification and regression tasks. It is an ensemble learning method that combines the predictions from multiple decision trees to improve the overall accuracy and robustness of the model.

import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import pickle  # Import pickle for saving the model


****Explaination****
pandas: A library used for data manipulation and analysis.
load_iris: A function to load the Iris dataset.
train_test_split: A function to split the dataset into training and testing sets.
RandomForestClassifier: The machine learning model used for classification.
accuracy_score, classification_report, confusion_matrix: Functions to evaluate the model's performance.
pickle: A module for serializing and deserializing Python objects, used here to save and load the model.

**************
iris = load_iris()
X = iris.data  # Features
y = iris.target  # Target variable (species)


****Explaination****
load_iris(): Loads the Iris dataset.
X: Contains the feature values (the attributes of the flowers).
y: Contains the target variable (the species of the flowers, represented as integers).

****************

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

****Explaination****
train_test_split: Splits the dataset into training and testing sets. Here, 20% of the data is set aside for testing.
X_train, y_train: Features and labels for training the model.
X_test, y_test: Features and labels for testing the model.

**********************

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

****Explaination****
RandomForestClassifier: Initializes the Random Forest model with 100 trees.
fit: Trains the model using the training data.
*************************

with open('random_forest_model.pkl', 'wb') as model_file:
    pickle.dump(rf_model, model_file)

print("Model saved to random_forest_model.pkl")



****Explaination****
pickle.dump: Saves the trained model to a file named random_forest_model.pkl for later use.

****************************
y_pred = rf_model.predict(X_test)

****Explaination****
Make Predictions on the Test Set
predict: Uses the trained model to make predictions on the test set. The predicted labels are stored in y_pred.
************************

accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

# Print evaluation results
print(f"Accuracy: {accuracy:.2f}")
print("Confusion Matrix:\n", conf_matrix)
print("Classification Report:\n", class_report)

****Explaination****
Evaluate the Model
accuracy_score: Calculates the accuracy of the model by comparing predicted labels to the actual labels in the test set.
confusion_matrix: Generates a confusion matrix that summarizes the performance of the model.
classification_report: Provides a detailed report including precision, recall, and F1-score for each class.
Finally, it prints the accuracy, confusion matrix, and classification report.

*********************

new_data = [[5.0, 3.5, 1.5, 0.2]]
prediction = rf_model.predict(new_data)
predicted_species = iris.target_names[prediction][0]

print(f"The predicted species for the input {new_data} is: {predicted_species}")


****Explaination****
new_data: A new sample of feature values for which predictions will be made.
predict: Uses the trained model to predict the species of the new data.
predicted_species: Maps the predicted class index back to the actual species name using iris.target_names.
Finally, it prints the predicted species for the input features.

***********************

with open('random_forest_model.pkl', 'rb') as model_file:
    loaded_model = pickle.load(model_file)

# Test the loaded model with the same new data
loaded_prediction = loaded_model.predict(new_data)
loaded_predicted_species = iris.target_names[loaded_prediction][0]

print(f"The predicted species from the loaded model for the input {new_data} is: {loaded_predicted_species}")

****Explaination****
Load the Model from Pickle
pickle.load: Loads the previously saved model from random_forest_model.pkl.
predict: Uses the loaded model to make predictions on the same new data.
loaded_predicted_species: Again maps the predicted class index back to the actual species name.
Finally, it prints the predicted species from the loaded model for the input features.
***************************************
